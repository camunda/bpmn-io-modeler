name: RELEASE
on:
  push:
    tags:
      - 'v*'
jobs:
  Pre_release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    - name: Create GitHub release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        TAG=$(git describe --tags --abbrev=0)
        gh release create $TAG --draft --title $TAG

  Build_release:
    needs: Pre_release
    strategy:
      matrix:
        os: [ ubuntu-latest, macos-12, windows-2022 ]
      fail-fast: false
    runs-on: ${{ matrix.os }}

    # Required to upload release artifacts to GitHub
    permissions:
      contents: write

    steps:
    - name: Checkout
      uses: actions/checkout@v4
    - name: Use Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 20
        cache: 'npm'
    - name: Install dependencies
      run: npm ci
    - name: Import Secrets
      id: secrets
      uses: hashicorp/vault-action@v3.0.0
      with:
        url: ${{ secrets.VAULT_ADDR }}
        method: approle
        roleId: ${{ secrets.VAULT_ROLE_ID }}
        secretId: ${{ secrets.VAULT_SECRET_ID }}
        exportEnv: false
        secrets: |
          secret/data/products/desktop-modeler/ci/sentry SENTRY_AUTH_TOKEN;
          secret/data/products/desktop-modeler/ci/sentry SENTRY_DSN;
          secret/data/products/desktop-modeler/ci/sentry SENTRY_ORG;
          secret/data/products/desktop-modeler/ci/sentry SENTRY_PROJECT;

    - name: Build release (Linux)
      if: ${{ runner.OS == 'Linux' }}
      env:
        CSC_LINK: "${{ secrets.CSC_LINK }}"
        CSC_KEY_PASSWORD: "${{ secrets.CSC_KEY_PASSWORD }}"
        MIXPANEL_TOKEN: "${{ secrets.MIXPANEL_PROJECT_TOKEN }}"
        MIXPANEL_STAGE: "prod"
        SENTRY_AUTH_TOKEN: "${{ steps.secrets.outputs.SENTRY_AUTH_TOKEN }}"
        SENTRY_DSN: "${{ steps.secrets.outputs.SENTRY_DSN }}"
        SENTRY_ORG: "${{ steps.secrets.outputs.SENTRY_ORG }}"
        SENTRY_PROJECT: "${{ steps.secrets.outputs.SENTRY_PROJECT }}"
        UPDATES_SERVER_PRODUCT_NAME: "${{ secrets.UPDATES_SERVER_PRODUCT_NAME }}"
        GH_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
        NODE_ENV: "production"
      run: npm run build -- --linux --publish
    - name: Build release (MacOS)
      if: ${{ runner.os == 'macOS' }}
      env:
        APPLE_DEVELOPER_ID: "${{ secrets.APPLE_DEVELOPER_ID }}"
        APPLE_DEVELOPER_ID_PASSWORD: "${{ secrets.APPLE_DEVELOPER_ID_PASSWORD }}"
        APPLE_TEAM_ID: "${{ secrets.APPLE_TEAM_ID }}"
        CSC_LINK: "${{ secrets.CSC_LINK }}"
        CSC_KEY_PASSWORD: "${{ secrets.CSC_KEY_PASSWORD }}"
        MIXPANEL_TOKEN: "${{ secrets.MIXPANEL_PROJECT_TOKEN }}"
        MIXPANEL_STAGE: "prod"
        SENTRY_AUTH_TOKEN: "${{ steps.secrets.outputs.SENTRY_AUTH_TOKEN }}"
        SENTRY_DSN: "${{ steps.secrets.outputs.SENTRY_DSN }}"
        SENTRY_ORG: "${{ steps.secrets.outputs.SENTRY_ORG }}"
        SENTRY_PROJECT: "${{ steps.secrets.outputs.SENTRY_PROJECT }}"
        UPDATES_SERVER_PRODUCT_NAME: "${{ secrets.UPDATES_SERVER_PRODUCT_NAME }}"
        GH_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
        NODE_ENV: "production"
      run: npm run build -- --mac --publish
    - name: Build release (Windows)
      if: ${{ runner.os == 'Windows' }}
      env:
        MIXPANEL_TOKEN: "${{ secrets.MIXPANEL_PROJECT_TOKEN }}"
        MIXPANEL_STAGE: "prod"
        SENTRY_AUTH_TOKEN: "${{ steps.secrets.outputs.SENTRY_AUTH_TOKEN }}"
        SENTRY_DSN: "${{ steps.secrets.outputs.SENTRY_DSN }}"
        SENTRY_ORG: "${{ steps.secrets.outputs.SENTRY_ORG }}"
        SENTRY_PROJECT: "${{ steps.secrets.outputs.SENTRY_PROJECT }}"
        UPDATES_SERVER_PRODUCT_NAME: "${{ secrets.UPDATES_SERVER_PRODUCT_NAME }}"
        GH_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
        NODE_ENV: "production"
      run: npm run build -- --win --publish

  Post_release:
    needs: Build_release
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        # required to compare versions in the
        # license book summary
        fetch-depth: 0
    - name: Install dependencies
      run: npm ci
    - name: Send license book summary
      env:
        EMAIL_HOST: "${{ secrets.EMAIL_HOST }}"
        EMAIL_PASSWORD: "${{ secrets.EMAIL_PASSWORD }}"
        EMAIL_REPLY_TO: "${{ secrets.EMAIL_REPLY_TO }}"
        EMAIL_TO: "${{ secrets.EMAIL_TO }}"
        EMAIL_USERNAME: "${{ secrets.EMAIL_USERNAME }}"
      run: npm run send-license-book-summary
