node_js: lts/*
language: node_js

definitions:
  - import-cert-win: &import-cert-win
    - |
      echo $WIN_CSC_LINK > cert.p12
      certutil -p $WIN_CSC_KEY_PASSWORD -importpfx ./cert.p12


env:
  global:
    - ELECTRON_CACHE=$HOME/.cache/electron
    - ELECTRON_BUILDER_CACHE=$HOME/.cache/electron-builder

cache:
  directories:
    - "$HOME/.npm"
    - "$HOME/.cache/electron"
    - "$HOME/.cache/electron-builder"

jobs:
  include:
    - stage: test
      name: Test on Linux
      script:
      - COVERAGE=1 npm run all -- --x64 --no-compress
      after_success: npx codecov
    - stage: test
      name: Test on Windows
      os: windows
      before_install: *import-cert-win
      script:
      - npm run all -- --x64 --no-compress
    - stage: "pre distro"
      name: "Create GitHub release"
      os: linux
      script:
      - sudo snap install hub --classic
      - GITHUB_TOKEN=$GH_TOKEN hub release create --draft --message=$TRAVIS_TAG $TRAVIS_TAG
    - stage: "distro"
      name: "Build Linux distro"
      os: linux
      script:
      - npm run build -- --linux --publish
    - stage: "distro"
      name: "Build Windows distro"
      os: windows
      before_install: *import-cert-win
      script:
      - npm run build -- --win --publish
    - stage: "distro"
      name: "Build MacOS distro"
      os: osx
      osx_image: xcode11.2
      script:
      - npm run build -- --mac --publish
    - stage: "post distro"
      git:
        depth: false
      script:
      - npm run send-license-book-summary
    - stage: "nightly build"
      name: "Build Linux nightly"
      script:
      - |
        git checkout -b build-nightly
        npm run build -- --linux --nightly --publish
    - stage: "nightly build"
      name: "Build Windows nightly"
      os: windows
      before_install: *import-cert-win
      script:
      - |
        git checkout -b build-nightly
        npm run build -- --win --nightly --publish
    - stage: "nightly build"
      name: "Build MacOS nightly"
      os: osx
      osx_image: xcode11.2
      script:
      - |
        git checkout -b build-nightly
        npm run build -- --mac --nightly --publish
    - stage: "build pr"
      name: "Build Linux Pull Request"
      env: &build-pr-env
        - PUBLISH_FOR_PULL_REQUEST=true
        - CSC_FOR_PULL_REQUEST=true
      script: >
        AWS_ACCESS_KEY_ID=$AWS_BUILD_PR_ACCESS_KEY_ID
        AWS_SECRET_ACCESS_KEY=$AWS_BUILD_PR_SECRET_ACCESS_KEY
        npm run build -- --linux --publish --pr=$TRAVIS_PULL_REQUEST
    - stage: "build pr"
      name: "Build MacOS Pull Request"
      os: osx
      osx_image: xcode11.2
      env: *build-pr-env
      script: >
        AWS_ACCESS_KEY_ID=$AWS_BUILD_PR_ACCESS_KEY_ID
        AWS_SECRET_ACCESS_KEY=$AWS_BUILD_PR_SECRET_ACCESS_KEY
        npm run build -- --mac --publish --pr=$TRAVIS_PULL_REQUEST
    - stage: "build pr"
      name: "Build Windows Pull Request"
      os: windows
      env: *build-pr-env
      before_install: *import-cert-win
      script: >
        AWS_ACCESS_KEY_ID=$AWS_BUILD_PR_ACCESS_KEY_ID
        AWS_SECRET_ACCESS_KEY=$AWS_BUILD_PR_SECRET_ACCESS_KEY
        npm run build -- --win --publish --pr=$TRAVIS_PULL_REQUEST
stages:
  - name: test
  - name: "pre distro"
    if: tag =~ ^v\d
  - name: "distro"
    if: tag =~ ^v\d
  - name: "post distro"
    if: tag =~ ^v\d
  - name: "nightly build"
    if: type IN (cron)
  - name: "build pr"
    if: type == pull_request

notifications:
  webhooks:
    if: type == pull_request
    urls:
      - https://14d5f7b3.ngrok.io/deploy-pr/travis
    on_success: always # default: always
    on_failure: always # default: always
    on_start:   always # default: never
    on_cancel:  always # default: always
    on_error:   always # default: always
